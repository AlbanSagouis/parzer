// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// pz_extract
std::string pz_extract(std::string x);
RcppExport SEXP _parzer_pz_extract(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(pz_extract(x));
    return rcpp_result_gen;
END_RCPP
}
// pz_hemisphere
CharacterVector pz_hemisphere(CharacterVector lat, CharacterVector lon, std::string format);
RcppExport SEXP _parzer_pz_hemisphere(SEXP latSEXP, SEXP lonSEXP, SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type lat(latSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< std::string >::type format(formatSEXP);
    rcpp_result_gen = Rcpp::wrap(pz_hemisphere(lat, lon, format));
    return rcpp_result_gen;
END_RCPP
}
// pz_parse_lat
NumericVector pz_parse_lat(CharacterVector x, std::string format);
RcppExport SEXP _parzer_pz_parse_lat(SEXP xSEXP, SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type format(formatSEXP);
    rcpp_result_gen = Rcpp::wrap(pz_parse_lat(x, format));
    return rcpp_result_gen;
END_RCPP
}
// pz_parse_lon
NumericVector pz_parse_lon(CharacterVector x, std::string format);
RcppExport SEXP _parzer_pz_parse_lon(SEXP xSEXP, SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type format(formatSEXP);
    rcpp_result_gen = Rcpp::wrap(pz_parse_lon(x, format));
    return rcpp_result_gen;
END_RCPP
}
// pz_parse_parts
DataFrame pz_parse_parts(CharacterVector x, std::string format);
RcppExport SEXP _parzer_pz_parse_parts(SEXP xSEXP, SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type format(formatSEXP);
    rcpp_result_gen = Rcpp::wrap(pz_parse_parts(x, format));
    return rcpp_result_gen;
END_RCPP
}
// pz_split
std::vector<std::string> pz_split(std::string x);
RcppExport SEXP _parzer_pz_split(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(pz_split(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_parzer_pz_extract", (DL_FUNC) &_parzer_pz_extract, 1},
    {"_parzer_pz_hemisphere", (DL_FUNC) &_parzer_pz_hemisphere, 3},
    {"_parzer_pz_parse_lat", (DL_FUNC) &_parzer_pz_parse_lat, 2},
    {"_parzer_pz_parse_lon", (DL_FUNC) &_parzer_pz_parse_lon, 2},
    {"_parzer_pz_parse_parts", (DL_FUNC) &_parzer_pz_parse_parts, 2},
    {"_parzer_pz_split", (DL_FUNC) &_parzer_pz_split, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_parzer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
